
export interface IHeadlessFileUi {
    // File operations
    triggerImport(): void;
    saveToComputer(type?: TExportType): void;
    shareImage(): void;
    upload(): void;

    // Browser storage
    openBrowserStorage(): void;
    storeToBrowserStorage(): void;

    // State
    getExportType(): TExportType;
    setExportType(type: TExportType): void;
    getShowSaveDialog(): boolean;

    // Events
    on(event: 'exportTypeChanged', callback: (type: TExportType) => void): void;
    on(event: 'fileSelected', callback: (files: FileList, option: TDropOption) => void): void;
    on(event: 'saveDialogChanged', callback: (show: boolean) => void): void;
}

export interface IHeadlessEditUi {
    // Filter operations
    applyFilter(filterKey: string, input?: any): Promise<boolean>;
    getAvailableFilters(): Array<{
        key: string;
        name: string;
        description?: string;
        isInstant: boolean;
        needsWebGL?: boolean;
        inEmbed?: boolean;
    }>;

    // Edit operations
    crop(left: number, top: number, right: number, bottom: number): void;
    resize(width: number, height: number, maintainAspectRatio?: boolean): void;
    rotate(degrees: number): void;
    flip(horizontal: boolean): void;

    // Clipboard
    copyToClipboard(): void;
    paste(): void;

    // State
    getCanCopy(): boolean;
    getCanPaste(): boolean;

    // Events
    on(event: 'filterApplied', callback: (filterKey: string) => void): void;
    on(event: 'editOperation', callback: (operation: string) => void): void;
}

export interface IHeadlessLayersUi {
    // Layer operations
    addLayer(name?: string): number;
    removeLayer(index: number): void;
    duplicateLayer(index: number): number;
    moveLayer(fromIndex: number, toIndex: number): void;
    selectLayer(index: number): void;
    renameLayer(index: number, name: string): void;

    // Layer properties
    setLayerOpacity(index: number, opacity: number): void;
    setLayerVisibility(index: number, isVisible: boolean): void;
    setLayerMixMode(index: number, mixMode: TMixMode): void;

    // Layer queries
    getLayers(): Array<TKlCanvasLayer & { index: number; isSelected: boolean }>;
    getActiveLayerIndex(): number;
    getLayerCount(): number;

    // Bulk operations
    mergeLayers(fromIndex: number, toIndex: number): void;
    mergeAll(): void;

    // Events
    on(event: 'layerAdded', callback: (layer: TKlCanvasLayer, index: number) => void): void;
    on(event: 'layerRemoved', callback: (layerId: string, index: number) => void): void;
    on(event: 'layerSelected', callback: (layerId: string, index: number) => void): void;
    on(event: 'layerUpdated', callback: (layer: TKlCanvasLayer, index: number) => void): void;
    on(event: 'layersReordered', callback: (newOrder: number[]) => void): void;
}

export interface IHeadlessColorUi {
    // Color operations
    setColor(color: TRgb): void;
    getColor(): TRgb;
    setSecondaryColor(color: TRgb): void;
    getSecondaryColor(): TRgb;
    swapColors(): void;

    // Eyedropper
    startEyedropper(): void;
    stopEyedropper(): void;
    isEyedropping(): boolean;

    // Color history
    getColorHistory(): TRgb[];
    addToHistory(color: TRgb): void;

    // Events
    on(event: 'colorChanged', callback: (color: TRgb) => void): void;
    on(event: 'secondaryColorChanged', callback: (color: TRgb) => void): void;
    on(event: 'eyedropperToggled', callback: (isActive: boolean) => void): void;
}

export interface IHeadlessBrushUi {
    // Brush operations
    setBrush(brushId: string): void;
    getBrushId(): string;

    // Brush properties
    setSize(size: number): void;
    getSize(): number;
    setOpacity(opacity: number): void;
    getOpacity(): number;
    setScatter(scatter: number): void;
    getScatter(): number;

    // Brush configuration
    setBrushConfig(config: any): void;
    getBrushConfig(): any;
    getAvailableBrushes(): Array<{
        id: string;
        name: string;
        tooltip: string;
        hasSize: boolean;
        hasOpacity: boolean;
        hasScatter: boolean;
    }>;

    // Eraser mode
    setEraser(isEraser: boolean): void;
    isEraser(): boolean;
    toggleEraser(): void;

    // Events
    on(event: 'brushChanged', callback: (brushId: string) => void): void;
    on(event: 'sizeChanged', callback: (size: number) => void): void;
    on(event: 'opacityChanged', callback: (opacity: number) => void): void;
    on(event: 'scatterChanged', callback: (scatter: number) => void): void;
    on(event: 'configChanged', callback: (config: any) => void): void;
    on(event: 'eraserToggled', callback: (isEraser: boolean) => void): void;
}

export interface IHeadlessToolUi {
    // Tool operations
    setTool(toolId: string): void;
    getTool(): string;
    getAvailableTools(): Array<{
        id: string;
        name: string;
        icon?: string;
    }>;

    // Zoom operations
    zoomIn(): void;
    zoomOut(): void;
    resetZoom(): void;
    fitZoom(): void;

    // History operations
    undo(): void;
    redo(): void;

    // State
    getCanUndo(): boolean;
    getCanRedo(): boolean;

    // Events
    on(event: 'toolChanged', callback: (toolId: string) => void): void;
    on(event: 'zoomChanged', callback: (scale: number) => void): void;
    on(event: 'historyChanged', callback: (canUndo: boolean, canRedo: boolean) => void): void;
}
